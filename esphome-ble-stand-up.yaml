external_components:
  - source:
      type: local
      path: components/esphome-idasen-desk-controller/components

esphome:
  name: esphome-ble-stand-up
  libraries:
    - "ESP32 BLE Arduino"

esp32:
  board: esp32dev
  framework:
    # type: esp-idf
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-B489A8"
    password: "L2i5rbTy5Fa7"
# captive_portal:


globals:
 # To store the Desk Connection Status
 - id: ble_client_connected
   type: bool
   initial_value: 'false'

# BEGIN BLUETOOTH DISCOVERY INTEGRATION
esp32_ble_tracker:
ble_client:
  - mac_address: "CA:A6:27:CF:F8:EE" # Replace with the desk bluetooth mac address
    id: idasen_desk
    on_connect:
      then:
        # Update the Desk Connection Status
        - lambda: |-
            id(ble_client_connected) = true;
        - delay: 5s
        # Update desk height and speed sensors after bluetooth is connected
            # id(desk_move).update();
        - lambda: |-
            id(desk_height).update();
    on_disconnect:
      then:
        # Update the Desk Connection Status
        - lambda: |-
            id(ble_client_connected) = false;

idasen_desk_controller:
    # Reference to the ble client component id
    # -----------
    # Required
    ble_client_id: idasen_desk
    # Fallback to use only up and down commands (less precise)
    # -----------
    # Optional -- todo remove
    only_up_down_command: true

cover:
  - platform: idasen_desk_controller
    name: "Desk"

sensor:
  # Desk Height Sensor
  - platform: ble_client
    type: characteristic
    ble_client_id: idasen_desk
    id: desk_height
    name: 'Desk Height'
    service_uuid: '6e400001-b5a3-f393-e0a9-e50e24dcca9e'
    characteristic_uuid: '6e400003-b5a3-f393-e0a9-e50e24dcca9e'
    icon: 'mdi:arrow-up-down'
    unit_of_measurement: 'cm'
    accuracy_decimals: 1
    update_interval: never
    notify: true
      # uint16_t raw_height1 = ((uint16_t)x[4] << 8) | x[3];
      # unsigned short height_mm = raw_height / 10;
      # return (float) height_mm / 10;
      # uint8_t raw_height1 = x[0];
      # uint8_t raw_height2 = x[3];
      # ESP_LOGD(">>>>", "The value of sensor is %d %d %d %d %d %d %d", x[0], x[1], x[2], x[3], x[4], raw_height1, raw_height2, *((float*)(&x[0])));
      # for (uint8_t byte: x) {
      #   ESP_LOGD(">>>", "0x%02X ", byte);
      # }
    lambda: |-
      uint16_t raw_height = x[3];
      unsigned short height_mm = raw_height;
      return (float) height_mm;
    # lambda: |-
    #   return *((float*)(&x[3]));

  # # Desk Speed Sensor
  # - platform: ble_client
  #   type: characteristic
  #   ble_client_id: idasen_desk
  #   id: desk_move
  #   name: 'Desk Move'
  #   service_uuid: '6e400001-b5a3-f393-e0a9-e50e24dcca9e'
  #   characteristic_uuid: '6e400003-b5a3-f393-e0a9-e50e24dcca9e'
  #   icon: 'mdi:arrow-split-horizontal'
  #   # unit_of_measurement: 'cm/min' # I'm not sure this unit is correct
  #   # accuracy_decimals: 0
  #   update_interval: never
  #   notify: true
  #     # uint16_t raw_speed = ((uint16_t)x[3] << 8) | x[1];
  #     # return raw_speed / 100;
  #   lambda: |-
  #     uint16_t raw_speed = x[1];
  #     if (raw_speed == 65) return -1;
  #     if (raw_speed == 66) return 1;
  #     return 0;

binary_sensor:
  # Desk Bluetooth Connection Status
  - platform: template
    name: 'Desk Connection'
    icon: 'mdi:bluetooth'
    id: desk_connection
    lambda: 'return id(ble_client_connected);'

  # # Desk Moving Status
  # - platform: template
  #   name: 'Desk Moving'
  #   id: desk_moving
  #   icon: 'mdi:engine'
  #   lambda: 'return id(desk_move).state != 0;'
